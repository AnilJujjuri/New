exception calling callback for <Future at 0x26411c2ac80 state=finished returned Buffer>
Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\lib\concurrent\futures\_base.py", line 342, in _invoke_callbacks
    callback(self)
  File "C:\Users\40020507\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\opcua\client\ua_client.py", line 445, in _create_subscription_callback
    response = struct_from_binary(ua.CreateSubscriptionResponse, data)
  File "C:\Users\40020507\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\opcua\ua\ua_binary.py", line 505, in struct_from_binary
    val = from_binary(uatype, data)
  File "C:\Users\40020507\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\opcua\ua\ua_binary.py", line 486, in from_binary
    return struct_from_binary(uatype, data)
  File "C:\Users\40020507\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\opcua\ua\ua_binary.py", line 505, in struct_from_binary
    val = from_binary(uatype, data)
  File "C:\Users\40020507\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\opcua\ua\ua_binary.py", line 482, in from_binary
    return unpack_uatype(vtype, data)
  File "C:\Users\40020507\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\opcua\ua\ua_binary.py", line 200, in unpack_uatype
    return st.unpack(data)
  File "C:\Users\40020507\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\opcua\ua\ua_binary.py", line 138, in unpack
    return struct.unpack(self.format, data.read(self.size))[0]
  File "C:\Users\40020507\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\opcua\common\utils.py", line 65, in read
    raise NotEnoughData("Not enough data left in buffer, request for {0}, we have {1}".format(size, self))
opcua.common.utils.NotEnoughData: Not enough data left in buffer, request for 4, we have Buffer(size:0, data:b'')
Traceback (most recent call last):
  File "d:\OneDrive - LTTS\Desktop\OPCRUST\main.py", line 18, in <module>
    subscription = client.create_subscription(500, lambda : None)
  File "C:\Users\40020507\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\opcua\client\client.py", line 565, in create_subscription
    return Subscription(self.uaclient, params, handler)
  File "C:\Users\40020507\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\opcua\common\subscription.py", line 93, in __init__
    response = self.server.create_subscription(
  File "C:\Users\40020507\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\opcua\client\ua_client.py", line 440, in create_subscription
    return resp_fut.result(self._timeout)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\lib\concurrent\futures\_base.py", line 460, in result
    raise TimeoutError()
concurrent.futures._base.TimeoutError

from opcua import Client
from opcua import ua

# Create a client and connect to the OPC UA server
client = Client("opc.tcp://localhost:4840/freeopcua/server/")
client.connect()
print("Client created")

# Create a session
session = client.create_session()
print("Session created")

# Write a value to the server
node = session.get_node("ns=3;i=1003")
value_to_write = 42.0
node.set_value(value_to_write)
print("Value written successfully")

# Create a subscription
handler = lambda: None
subscription = session.create_subscription(500, handler)
print("Subscription created")

# Subscribe to the data change event
subscription.subscribe_data_change(node)
print("Subscribed")

# Continuous data change handling loop
while True:
    # Wait for data change events
    data_changes = subscription.wait_for_events()
    
    # Process received data changes
    for data_change in data_changes:
        if data_change.Value is not None:
            print("Data change from server:")
            print(f"Item {data_change.NodeId}, Value = {data_change.Value}")
    
    # Break the loop if desired condition is met
    # For example, you can use a flag or a specific value to stop the loop
    # if some condition is satisfied
    
    # Add a delay or sleep to control the rate of data change handling
    # For example, you can use the time.sleep() function to introduce a delay
    
# Disconnect from the server
client.disconnect()
