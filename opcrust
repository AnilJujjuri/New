from opcua import Client, ua


def main():
    client = Client("opc.tcp://MYTSL02946.lnties.com:53530/OPCUA/SimulationServer")
    client.application_uri = "urn:PythonClient"
    client.session_retry_limit = 3
    client.connect()

    print("Client created")

    try:
        session = create_session(client)
        subscribe_to_values(session)

        # Run the session (this blocks the execution until the session is closed)
        session.run()

    finally:
        client.disconnect()
        print("Client disconnected")


def create_session(client):
    session = client.create_session()
    print("Session created")
    return session


def subscribe_to_values(session):
    # Create a subscription and monitored items
    subscription = session.create_subscription(2000, ua.SubscriptionDiagnosticsDataType())
    print("Subscription created")

    # Define the data change callback function
    def data_change_callback(subscription, data):
        print("Data change from server:")
        for item in data.MonitoredItems:
            print_value(item)

    # Set the callback function for data change notifications
    subscription.data_change_notification(callback=data_change_callback)

    # Create the monitored items
    nodes_to_monitor = [
        ua.NodeId(3, 1003),
        ua.NodeId(3, 1008),
        ua.NodeId(3, 1009),
        ua.NodeId(3, 1010)
    ]
    items_to_create = [
        ua.MonitoredItemCreateRequest(
            MonitoringMode=ua.MonitoringMode.Reporting,
            RequestedParameters=ua.MonitoringParameters(
                ClientHandle=1,
                SamplingInterval=0,
                Filter=ua.EventFilter(),
                QueueSize=1,
                DiscardOldest=True
            ),
            ItemToMonitor=ua.ReadValueId(
                NodeId=node,
                AttributeId=ua.AttributeIds.Value,
                IndexRange=None,
                DataEncoding=None
            )
        )
        for node in nodes_to_monitor
    ]
    subscription.create_monitored_items(items_to_create)

    print("Monitored items created")


def print_value(item):
    node_id = item.ItemToMonitor.NodeId
    data_value = item.LastValue.Value
    if data_value is not None:
        print(f"Item '{node_id}', Value: {data_value}")
    else:
        print(f"Item '{node_id}', Value not found, Error: {item.LastValue.StatusCode}")


if __name__ == '__main__':
    main()
