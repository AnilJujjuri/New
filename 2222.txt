from pymodbus.client.sync import ModbusTcpClient
import random
import time
from azure.iot.device import IoTHubModuleClient

CONNECTION_STRING = "HostName=EDGTneerTrainingPractice.azure-devices.net;DeviceId=energydevicemeter;SharedAccessKey=QWn2PcGnFhkYFvwgmhRVnSMaqtiIVHd41s1ISUQhUFs=s"

def send_to_iothub(data):
    try:
        module_client = IoTHubModuleClient.create_from_connection_string(CONNECTION_STRING)
        module_client.connect()
        print("Connected to Azure IoT Hub")
        twin = {"properties": data}
        print(data)
        module_client.patch_twin_reported_properties(twin)
        print("Twin reported properties updated")
        module_client.disconnect()
        print("Disconnected from Azure IoT Hub")
    except Exception as e:
        print("Error sending data to IoT Hub:", str(e))

def collect_and_send_data(client):
    try:
        energy_consumption_address = 0x0000
        energy_consumption_value = client.read_holding_registers(energy_consumption_address, count=1).registers[0]

        voltage_address = 0x0001
        voltage_value = client.read_holding_registers(voltage_address, count=1).registers[0]

        current_address = 0x0002
        current_value = client.read_holding_registers(current_address, count=1).registers[0]

        power_factor_address = 0x0003
        power_factor_value = client.read_holding_registers(power_factor_address, count=1).registers[0]

        telemetry = {
            "message_type": "telemetry",
            "data": {
                "energy_consumption": energy_consumption_value,
                "voltage": voltage_value,
                "current": current_value,
                "power": power_factor_value,
            },
            "ts": int(time.time())
        }

        # Send telemetry data to IoT Hub
        send_to_iothub(telemetry)

    except Exception as e:
        print("An error has occurred:", e)

if __name__ == "__main__":
    client = ModbusTcpClient('192.168.0.104', port=5020)  # Update the IP and port
    try:
        while True:
            collect_and_send_data(client)
            time.sleep(5)  # Collect data every 5 seconds
    except KeyboardInterrupt:
        print("Simulation stopped.")
    finally:
        # Close the client connection
        client.close()
