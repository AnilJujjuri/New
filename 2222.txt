import time
from azure.iot.device import IoTHubModuleClient, Message
from pymodbus.client.sync import ModbusTcpClient

# Azure IoT Hub connection string
CONNECTION_STRING = "<your-connection-string>"

def send_to_iothub(data):
    try:
        module_client = IoTHubModuleClient.create_from_connection_string(CONNECTION_STRING)
        module_client.connect()
        print("Connected to Azure IoT Hub")
        twin = {"properties": data}
        module_client.patch_twin_reported_properties(twin)
        print("Twin reported properties updated")
        module_client.disconnect()
        print("Disconnected from Azure IoT Hub")
    except Exception as e:
        print("Error sending data to IoT Hub:", str(e))

def collect_and_send_data(modbus_client):
    try:
        with modbus_client as client:
            energy_consumption_response = client.read_holding_registers(0, count=2, unit=1)
            voltage_response = client.read_holding_registers(2, count=2, unit=1)
            current_response = client.read_holding_registers(4, count=2, unit=1)
            power_factor_response = client.read_holding_registers(6, count=2, unit=1)

            energy_consumption_value = int.from_bytes(energy_consumption_response.registers, byteorder='big')
            voltage_value = voltage_response.registers[0] + voltage_response.registers[1] / 100.0
            current_value = current_response.registers[0] + current_response.registers[1] / 100.0
            power_factor_value = power_factor_response.registers[0] + power_factor_response.registers[1] / 100.0

            telemetry = {
                "message_type": "telemetry",
                "data": {
                    "energy_consumption": energy_consumption_value,
                    "voltage": voltage_value,
                    "current": current_value,
                    "power": power_factor_value,
                },
                "ts": int(time.time())
            }

            # Send telemetry data to IoT Hub
            send_to_iothub(telemetry)

    except Exception as e:
        print("An error has occurred:", e)

if __name__ == "__main__":
    slave_ip = 'localhost'

    with ModbusTcpClient(slave_ip, port=502) as modbus_client:
        try:
            while True:
                collect_and_send_data(modbus_client)
                time.sleep(5)  # Collect data every 5 seconds
        except KeyboardInterrupt:
            print("Simulation stopped.")
<?xml version="1.0" encoding="UTF-8"?>
<configuration xmlns="http://www.modbus.org/xml/ConfigurationFile.xsd" version="1.0">
  <slave id="1" name="ModbusSlave1">
    <tcpport id="502"/>
    <readpoints>
      <register id="0" name="EnergyConsumption" address="0" datatype="int32" length="2"/>
      <register id="1" name="Voltage" address="2" datatype="float32" length="2"/>
      <register id="2" name="Current" address="4" datatype="float32" length="2"/>
      <register id="3" name="PowerFactor" address="6" datatype="float32" length="2"/>
    </readpoints>
  </slave>
</configuration>
