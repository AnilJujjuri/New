import time
import random
import os
from azure.iot.device import IoTHubModuleClient, Message
import minimalmodbus
from pathlib import Path

# Load environment variables from .env file
from dotenv import load_dotenv

dotenv_path = Path('config.env')
load_dotenv(dotenv_path=dotenv_path)

# Azure IoT Hub connection string
CONNECTION_STRING = os.getenv('device_connection_string')

def send_to_iothub(data):
    try:
        module_client = IoTHubModuleClient.create_from_connection_string(CONNECTION_STRING)
        module_client.connect()
        print("Connected to Azure IoT Hub")
        twin = {"properties": data}
        module_client.patch_twin_reported_properties(twin)
        print("Twin reported properties updated")
        module_client.disconnect()
        print("Disconnected from Azure IoT Hub")
    except Exception as e:
        print("Error sending data to IoT Hub:", str(e))

if __name__ == "__main__":
    slave_address = 1  # Modbus slave address (unit ID)
    modbus_instrument = minimalmodbus.Instrument('localhost', slave_address)
    modbus_instrument.serial.baudrate = 9600  # Modify baudrate as needed
    modbus_instrument.serial.timeout = 0.2  # Modify timeout as needed
    modbus_instrument.mode = minimalmodbus.MODE_TCP

    try:
        while True:
            energy_consumption_value = random.uniform(0, 100)
            voltage_value = random.uniform(100, 250)
            current_value = random.uniform(1, 10)
            power_factor_value = random.uniform(0.8, 1.0)

            modbus_instrument.write_register(0, int(energy_consumption_value), functioncode=6)
            modbus_instrument.write_register(2, int(voltage_value * 100), functioncode=6)
            modbus_instrument.write_register(4, int(current_value * 100), functioncode=6)
            modbus_instrument.write_register(6, int(power_factor_value * 100), functioncode=6)

            telemetry = {
                "message_type": "telemetry",
                "data": {
                    "energy_consumption": energy_consumption_value,
                    "voltage": voltage_value,
                    "current": current_value,
                    "power": power_factor_value,
                },
                "ts": int(time.time())
            }

            send_to_iothub(telemetry)
            time.sleep(5)  # Collect data every 5 seconds
    except KeyboardInterrupt:
        print("Simulation stopped.")
