use std::sync::Arc;

use opcua::client::prelude::*;

use opcua::sync::*;

use opcua::types::data_value::DataValue;

use opcua::types::string::UAString;

use opcua::types::service_types::*;

use opcua::types::{ExpandedNodeId, NodeId, ObjectId, ObjectTypeId};

use opcua::types::extension_object::ExtensionObject;

use hostname::get_hostname;

fn main() {

    let mut client = ClientBuilder::new()

        .application_name("RUST-OPCUA-Client")

        .application_uri("urn:RustClient")

        .create_sample_keypair(true)

        .trust_server_certs(true)

        .session_retry_limit(3)

        .client()

        .unwrap();

    println!("Client created");

    let hostname = match gethostname::gethostname().into_string() {

        Ok(name) => name,

        Err(_) => String::from("unknown"),

    };

    println!("Hostname: {}", hostname);

    // Create an endpoint. The EndpointDescription can be made from a tuple consisting of

    // the endpoint url, security policy, message security mode and user token policy.

    let endpoint_url = format!("opc.tcp://{}:53530/OPCUA/SimulationServer", hostname);

    let endpoint: EndpointDescription = (

        &endpoint_url,

        "None",

        MessageSecurityMode::None,

        UserTokenPolicy::anonymous(),

    )

        .into();

    // Create the session

    let session = client.connect_to_endpoint(endpoint, IdentityToken::Anonymous).unwrap();

    println!("Session created");

    // Create a subscription and monitored items

    if subscribe_to_values(session.clone()).is_ok() {

        println!("Subscribed");

        let _ = Session::run(session);

    } else {

        println!("Error creating subscription");

    }

}

fn subscribe_to_values(session: Arc<RwLock<Session>>) -> Result<(), StatusCode> {

    let session = session.write();

    // Create a subscription polling every 2s with a callback

    let subscription_id = session.create_subscription(

        2000.0,

        10,

        30,

        0,

        0,

        true,

        DataChangeCallback::new(|changed_monitored_items| {

            println!("Data change from server:");

            changed_monitored_items.iter().for_each(|item| print_value(item));

        }),

    )?;

    // Create some monitored items

    let items_to_create: Vec<MonitoredItemCreateRequest> = [1003, 1008, 1009, 1010]

        .iter()

        .map(|v| NodeId::new(3, *v).into())

        .collect();

    let _ = session.create_monitored_items(subscription_id, TimestampsToReturn::Both, &items_to_create)?;

    let status_code = session.write(&[WriteValue {

        node_id: NodeId::new(3, 1012),

        value: DataValue::value_only(20),

        attribute_id: 7,

        index_range: UAString::null(),

    }]);

    match status_code {

        Ok(_) => println!("Value written successfully"),

        Err(status_code) => {

            println!("Error writing to node: {:?}", status_code);

            match status_code {

 > [4/4] RUN cargo build:
#9 0.718     Updating crates.io index
#9 182.8 error: failed to select a version for `hostname`.
#9 182.8     ... required by package `opc-ua v0.1.0 (/app)`
#9 182.8 versions that meet the requirements `^0.3.1` are: 0.3.1
#9 182.8
#9 182.8 the package `opc-ua` depends on `hostname`, with features: `client` but `hostname` does not have these features.
#9 182.8
#9 182.8
#9 182.8 failed to select a version for `hostname` which could resolve this conflict
------
executor failed running [/bin/sh -c cargo build]: exit code: 101
