use std::env;
use std::sync::Arc;
use opcua::client::prelude::*;
use opcua::sync::*;
use opcua::types::data_value::DataValue;
use opcua::types::string::UAString;
use opcua::types::service_types::WriteValue;
use opcua::types::{ExpandedNodeId, NodeId};
use opcua::types::extension_object::ExtensionObject;

fn main() {
    // Retrieve the hostname from the command line arguments
    let args: Vec<String> = env::args().collect();
    if args.len() < 2 {
        println!("Usage: ./program <hostname>");
        return;
    }
    let hostname = &args[1];

    let mut client = ClientBuilder::new()
        .application_name("RUST-OPCUA-Client")
        .application_uri("urn:RustClient")
        .create_sample_keypair(true)
        .trust_server_certs(true)
        .session_retry_limit(3)
        .client()
        .unwrap();
    
    println!("Client created");

    // Create an endpoint using the provided hostname
    let endpoint: EndpointDescription = (
        format!("opc.tcp://{}:53530/OPCUA/SimulationServer", hostname),
        "None",
        MessageSecurityMode::None,
        UserTokenPolicy::anonymous()
    ).into();

    // Create the session
    let session = client.connect_to_endpoint(endpoint, IdentityToken::Anonymous).unwrap();  
 
    println!("Session created");

    // Create a subscription and monitored items
    if subscribe_to_values(session.clone()).is_ok() {
        println!("Subscribed");
        let _ = Session::run(session);
    } else {
        println!("Error creating subscription");
    }
}

// Rest of the code remains the same...
